// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createBill = `-- name: CreateBill :one
INSERT INTO bills (order_number, user_id, sum, processed_at)
VALUES ($1, $2, $3, $4)
    RETURNING id, order_number, user_id, sum, processed_at
`

type CreateBillParams struct {
	OrderNumber string
	UserID      int32
	Sum         int32
	ProcessedAt time.Time
}

func (q *Queries) CreateBill(ctx context.Context, arg CreateBillParams) (Bill, error) {
	row := q.db.QueryRowContext(ctx, createBill,
		arg.OrderNumber,
		arg.UserID,
		arg.Sum,
		arg.ProcessedAt,
	)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.OrderNumber,
		&i.UserID,
		&i.Sum,
		&i.ProcessedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (number, user_id, status, accrual, uploaded_at)
VALUES ($1, $2, $3, $4, $5)
    RETURNING number, user_id, status, accrual, uploaded_at
`

type CreateOrderParams struct {
	Number     string
	UserID     int32
	Status     string
	Accrual    int32
	UploadedAt time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.Number,
		arg.UserID,
		arg.Status,
		arg.Accrual,
		arg.UploadedAt,
	)
	var i Order
	err := row.Scan(
		&i.Number,
		&i.UserID,
		&i.Status,
		&i.Accrual,
		&i.UploadedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (login, password, balance_current, balance_withdrawn)
VALUES ($1, $2, $3, $4)
    RETURNING id, login, password, balance_current, balance_withdrawn
`

type CreateUserParams struct {
	Login            string
	Password         string
	BalanceCurrent   int32
	BalanceWithdrawn int32
}

// queries/queries.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Login,
		arg.Password,
		arg.BalanceCurrent,
		arg.BalanceWithdrawn,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.BalanceCurrent,
		&i.BalanceWithdrawn,
	)
	return i, err
}

const getAllBills = `-- name: GetAllBills :many
SELECT id, order_number, user_id, sum, processed_at
FROM bills
ORDER BY processed_at DESC
`

func (q *Queries) GetAllBills(ctx context.Context) ([]Bill, error) {
	rows, err := q.db.QueryContext(ctx, getAllBills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.ID,
			&i.OrderNumber,
			&i.UserID,
			&i.Sum,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBillByID = `-- name: GetBillByID :one
SELECT id, order_number, user_id, sum, processed_at
FROM bills
WHERE id = $1
`

func (q *Queries) GetBillByID(ctx context.Context, id int32) (Bill, error) {
	row := q.db.QueryRowContext(ctx, getBillByID, id)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.OrderNumber,
		&i.UserID,
		&i.Sum,
		&i.ProcessedAt,
	)
	return i, err
}

const getBillsByUserID = `-- name: GetBillsByUserID :many
SELECT id, order_number, user_id, sum, processed_at
FROM bills
WHERE user_id = $1
ORDER BY processed_at DESC
`

func (q *Queries) GetBillsByUserID(ctx context.Context, userID int32) ([]Bill, error) {
	rows, err := q.db.QueryContext(ctx, getBillsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.ID,
			&i.OrderNumber,
			&i.UserID,
			&i.Sum,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByNumber = `-- name: GetOrderByNumber :one
SELECT number, user_id, status, accrual, uploaded_at
FROM orders
WHERE number = $1
`

func (q *Queries) GetOrderByNumber(ctx context.Context, number string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByNumber, number)
	var i Order
	err := row.Scan(
		&i.Number,
		&i.UserID,
		&i.Status,
		&i.Accrual,
		&i.UploadedAt,
	)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT number, user_id, status, accrual, uploaded_at
FROM orders
WHERE user_id = $1
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.Number,
			&i.UserID,
			&i.Status,
			&i.Accrual,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, password, balance_current, balance_withdrawn
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.BalanceCurrent,
		&i.BalanceWithdrawn,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, password, balance_current, balance_withdrawn
FROM users
WHERE login = $1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.BalanceCurrent,
		&i.BalanceWithdrawn,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE number = $1
`

type UpdateOrderStatusParams struct {
	Number string
	Status string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Number, arg.Status)
	return err
}

const updateUserBalance = `-- name: UpdateUserBalance :exec
UPDATE users
SET balance_current = $2,
    balance_withdrawn = $3
WHERE id = $1
`

type UpdateUserBalanceParams struct {
	ID               int32
	BalanceCurrent   int32
	BalanceWithdrawn int32
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBalance, arg.ID, arg.BalanceCurrent, arg.BalanceWithdrawn)
	return err
}
